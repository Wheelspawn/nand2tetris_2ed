// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	
	// instruction[0]: if comp > 0 jump
	// instruction[1]: if comp = 0 jump
	// instruction[2]: if comp < 0 jump
	
	// instruction[3]: store comp in M
	// instruction[4]: store comp in D
	// instruction[5]: store comp in A
	
	// instruction[6..11]: zx, nx, zy, ny, f, no
	
	// if instruction[12] == 0: select A
	// if instruction[12] == 1: select M
	// if instruction[15] == 0: A-instruction
	// if instruction[15] == 1: C-instruction
	
	Mux16(a=instruction,b=loop,sel=instruction[15],out=muxA);				// Mux16 to A register
	
	And(a=instruction[15],b=instruction[4],out=loadD);						// C instruction and dest is D
	DRegister(in=loop,load=loadD,out=outD);									// data register (D)
	
	Not(in=instruction[15],out=aInst);										// not a C instruction
	Or(a=instruction[5],b=aInst,out=loadA);									// A instruction or load into A
	ARegister(in=muxA,load=loadA,out=outA,out[0..14]=addressM);				// address register (A)
	
	Mux16(a=outA,b=inM,sel=instruction[12],out=muxALU);						// Mux16 to ALU
	
	ALU(x=outD,
		y=muxALU,
		zx=instruction[11],
		nx=instruction[10],
		zy=instruction[9],
		ny=instruction[8],
		f=instruction[7],
		no=instruction[6],
		out=loop,
		out=outM,
		zr=zr0,
		ng=ng0);
		
	// zr0: if out==0	zr0=1	else zr0=0
	// ng0: if out<0	ng0=1	else ng0=0
	// gt0: if out>0	gt0=1	else gt0=0
	
	Not(in=zr0,out=notZr);													// zr0!=0
	Not(in=ng0,out=gt);														// ng0>=0
	And(a=gt,b=notZr,out=gt0);												// out!=0 and out>=0 -> out>0
	
	And(a=zr0,b=instruction[1],out=eqZero);									// zr0 == 0 and JEQ inst
	And(a=ng0,b=instruction[2],out=ngZero);									// ng0 < 0 and JLT inst
	And(a=gt0,b=instruction[0],out=gtZero);									// gt0 > 0 and JGT inst
	
	Or(a=eqZero,b=ngZero,out=ngOrEqZero);
	Or(a=ngOrEqZero,b=gtZero,out=jump);										// jump if any above conditions are met
	And(a=jump,b=instruction[15],out=jumpIfCInst);
	
	And(a=instruction[15],b=instruction[3],out=writeM);						// writeM
	
	PC(in=outA,load=jumpIfCInst,inc=true,reset=reset,out[0..14]=pc,out[15]=false);
}