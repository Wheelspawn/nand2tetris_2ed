
// Snake takes place on a 32x16 board. Only rows 2-14 and 1-30 are accessible, hence the restrictions on randRange.

class SnakeGame {

   field Random rand;
   field DrawHelper drawhelper;
   
   field Snake snake;
   field Egg egg;
   field int score;
   field int direction; // 0=none, 1=up, 2=down, 3=left, 4=right
   
   constructor SnakeGame new() {
      var int snake_xpos;
      var int snake_ypos;
      var int egg_xpos;
      var int egg_ypos;
      
      let rand = Random.setSeed(1933);
      
      let snake_xpos = 6 + Random.randRange(24);
      let snake_ypos = 6 + Random.randRange(8);
      
      let egg_xpos = 2 + Random.randRange(28);
      let egg_ypos = 2 + Random.randRange(12);
      
      let drawhelper = DrawHelper.new();
      let snake = Snake.new(snake_xpos, snake_ypos, drawhelper);
      let egg = Egg.new(egg_xpos, egg_ypos, drawhelper);
      
      let direction = 3;
      let score = 0;
      
      do Output.moveCursor(0,0);
      do Output.printString("Score: ");
      do Output.printInt(score);
      do Output.printString(" ");
      do drawBoundaryWalls();
      
      return this;
   }

   method void dispose() {
      do snake.dispose();
      do Memory.deAlloc(this);
      return;
   }
   
   method void drawBoundaryWalls()
   {
      var int x;
      var int y;
      
      let x = 0;
      let y = 2;      
      
      while (x < 32)
      {
         do drawBoundaryWall(x*16,16);
         do drawBoundaryWall(x*16,240);
         
         let x = x+1;
      }
 
      while (y < 15)
      {
         do drawBoundaryWall(0,y*16);
         do drawBoundaryWall(496,y*16);
         
         let y = y+1;
      }
      
      return;
   }
   
   method void drawBoundaryWall(int Ax, int Ay)
   {
      // 1st half
      do Screen.drawLine(Ax,Ay,Ax+15,Ay);
      do Screen.drawLine(Ax,Ay+1,Ax+15,Ay+1);
      do Screen.drawRectangle(Ax+7,Ay+2,Ax+8,Ay+3);
      do Screen.drawRectangle(Ax+14,Ay+2,Ax+15,Ay+3);
      
      do Screen.drawLine(Ax,Ay+4,Ax+15,Ay+4);
      do Screen.drawLine(Ax,Ay+5,Ax+15,Ay+5);
      do Screen.drawRectangle(Ax+0,Ay+6,Ax+1,Ay+7);
      do Screen.drawRectangle(Ax+9,Ay+6,Ax+10,Ay+7);
   
      // 2nd half
      do Screen.drawLine(Ax,Ay+8,Ax+15,Ay+8);
      do Screen.drawLine(Ax,Ay+9,Ax+15,Ay+9);
      do Screen.drawRectangle(Ax+7,Ay+10,Ax+8,Ay+11);
      do Screen.drawRectangle(Ax+14,Ay+10,Ax+15,Ay+11);
      
      do Screen.drawLine(Ax,Ay+12,Ax+15,Ay+12);
      do Screen.drawLine(Ax,Ay+13,Ax+15,Ay+13);
      do Screen.drawRectangle(Ax+0,Ay+14,Ax+1,Ay+15);
      do Screen.drawRectangle(Ax+9,Ay+14,Ax+10,Ay+15);
      
      return;
   }

   method void moveSnake() {
      if (direction = 1) { do snake.moveUp(); }
      if (direction = 2) { do snake.moveDown(); }
      if (direction = 3) { do snake.moveLeft(); }
      if (direction = 4) { do snake.moveRight(); }
      return;
   }
   
   method void handleEggConsumed() {
   
      var int new_xpos;
      var int new_ypos;
         
      if ((snake.getXPos() = egg.getXPos()) & (snake.getYPos() = egg.getYPos()))
      {
         
         let new_xpos = 2 + Random.randRange(28);
         let new_ypos = 2 + Random.randRange(12);
         
         /**
         while (~snake.collidesWith(new_xpos,new_ypos))
         {
            let new_xpos = 2 + Random.randRange(28);
            let new_ypos = 2 + Random.randRange(12);
         } */
         
         do egg.draw(true);
         
         do egg.setXPos(new_xpos);
         do egg.setYPos(new_ypos);
         
         do snake.growBody();
         
         let score = score + 1;
         do Output.moveCursor(0,0);
         do Output.printString("Score: ");
         do Output.printInt(score);
         do Output.printString(" ");
      }
      else
      {
         do egg.draw(false);
      }
      
      return;
   }
   
   method void run() {
   
      var int delay;
         
      var char key;  // the key currently pressed by the user
      var boolean exit;
      let exit = false;
      let delay = 0;
      
      while (~exit) {
         
         let key = Keyboard.keyPressed();
         
         while (delay < 250)
         {
            let key = Keyboard.keyPressed();
            do Sys.wait(1);  // delays the next movement
            let delay = delay + 1;
            
            if (key = 81)  { let exit = true; }     // q key
            if (key = 131) { let direction = 1; }   // up arrow
            if (key = 133) { let direction = 2; }   // down arrow
            if (key = 130) { let direction = 3; }   // left arrow
            if (key = 132) { let direction = 4; }   // right arrow
         }
         let delay = 0;
         
         do snake.draw(true);
         do moveSnake();
         do handleEggConsumed();
         do snake.draw(false);
         
     } // while
     return;
   }
}



